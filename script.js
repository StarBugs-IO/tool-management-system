// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
const API_BASE = `${window.location.origin}/api`;
let tools = [];

// –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã DOM –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    initializeApp();
});

function initializeApp() {
    console.log('üõ†Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏...');
    
    // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã DOM
    const toolForm = document.getElementById('toolForm');
    const machineSelect = document.getElementById('machine');
    const toolTypeSelect = document.getElementById('toolType');
    const toolSizeSelect = document.getElementById('toolSize');
    const cellNumberSelect = document.getElementById('cellNumber');
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–µ —Å–ø–∏—Å–∫–∏
    updateMachineSelect();
    updateToolTypeSelect();
    updateCellNumberSelect();
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    toolForm.addEventListener('submit', async function(event) {
        event.preventDefault();
        
        const machine = machineSelect.value;
        const toolType = toolTypeSelect.value;
        const toolSize = toolSizeSelect.value;
        const cellNumber = cellNumberSelect.value;

        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
        if (!cellNumber || cellNumber === '') {
            showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è—á–µ–π–∫—É!', true);
            cellNumberSelect.style.borderColor = '#ffffff';
            setTimeout(() => {
                cellNumberSelect.style.borderColor = '';
            }, 2000);
            return;
        }

        if (!machine || machine === '') {
            showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–Ω–æ–∫!', true);
            return;
        }

        if (!toolType || toolType === '') {
            showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞!', true);
            return;
        }

        console.log('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞:', { machine, toolType, toolSize, cellNumber });
        
        const tool = {
            machine: machine,
            toolType: toolType,
            toolSize: toolSize,
            cellNumber: cellNumber,
            dateAdded: new Date().toISOString()
        };
        
        await addTool(tool);
        toolForm.reset();
        updateToolSizeSelect(); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞
    });

    toolTypeSelect.addEventListener('change', updateToolSizeSelect);
    
    machineSelect.addEventListener('change', function() {
        updateCellNumberSelect();
        updateTable();
    });

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
    loadTools();
    
    // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    setInterval(loadTools, 5000);
    
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
}

function updateMachineSelect() {
    const machineSelect = document.getElementById('machine');
    
    // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞–Ω–∫–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏
    const adminMachines = JSON.parse(localStorage.getItem('admin_machines')) || [
        { id: 1, name: "–¢–°–ó-–§13-70", status: "active", cells: 24 },
        { id: 2, name: "KVL-1361A", status: "active", cells: 24 },
        { id: 3, name: "KVL-1260A", status: "active", cells: 24 }
    ];
    
    machineSelect.innerHTML = '<option value="" disabled selected>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–Ω–æ–∫</option><option value="–í—Å–µ">–í—Å–µ —Å—Ç–∞–Ω–∫–∏</option>';
    
    adminMachines.forEach(machine => {
        if (machine.status === 'active') {
            const option = document.createElement('option');
            option.value = machine.name;
            option.textContent = machine.name;
            machineSelect.appendChild(option);
        }
    });
}

function updateToolTypeSelect() {
    const toolTypeSelect = document.getElementById('toolType');
    
    // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–∏–ø—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏–∑ –∞–¥–º–∏–Ω–∫–∏
    const adminToolTypes = JSON.parse(localStorage.getItem('admin_toolTypes')) || {
        '–§—Ä–µ–∑–∞': ['1.5', '2.0', '2.5', '3.0', '3.5', '4.0', '4.5', '5.0', '5.5', '6.0'],
        '–°–≤–µ—Ä–ª–æ': ['3', '4', '5', '6', '7', '8', '9', '10', '11', '12'],
        '–†–∞–∑–≤–µ—Ä—Ç–∫–∞': ['6', '8', '10', '12', '14', '16', '18', '20'],
        '–†–µ–∑—å–±–æ—Ñ—Ä–µ–∑–∞': ['M6', 'M8', 'M10', 'M12'],
        '–î–∏—Å–∫–æ–≤–∞—è —Ñ—Ä–µ–∑–∞': ['50', '63', '80', '100'],
        '–†–∞—Å—Ç–æ—á–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç': ['16', '20', '25', '32'],
        '–¶–µ–Ω—Ç—Ä–æ–≤–∫–∞': []
    };
    
    toolTypeSelect.innerHTML = '<option value="" disabled selected>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø</option>';
    
    Object.keys(adminToolTypes).forEach(type => {
        const option = document.createElement('option');
        option.value = type;
        option.textContent = type;
        toolTypeSelect.appendChild(option);
    });
}

function updateToolSizeSelect() {
    const toolTypeSelect = document.getElementById('toolType');
    const toolSizeSelect = document.getElementById('toolSize');
    
    const selectedType = toolTypeSelect.value;
    
    // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞–∑–º–µ—Ä—ã –∏–∑ –∞–¥–º–∏–Ω–∫–∏
    const adminToolTypes = JSON.parse(localStorage.getItem('admin_toolTypes')) || {
        '–§—Ä–µ–∑–∞': ['1.5', '2.0', '2.5', '3.0', '3.5', '4.0', '4.5', '5.0', '5.5', '6.0'],
        '–°–≤–µ—Ä–ª–æ': ['3', '4', '5', '6', '7', '8', '9', '10', '11', '12'],
        '–†–∞–∑–≤–µ—Ä—Ç–∫–∞': ['6', '8', '10', '12', '14', '16', '18', '20'],
        '–†–µ–∑—å–±–æ—Ñ—Ä–µ–∑–∞': ['M6', 'M8', 'M10', 'M12'],
        '–î–∏—Å–∫–æ–≤–∞—è —Ñ—Ä–µ–∑–∞': ['50', '63', '80', '100'],
        '–†–∞—Å—Ç–æ—á–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç': ['16', '20', '25', '32'],
        '–¶–µ–Ω—Ç—Ä–æ–≤–∫–∞': []
    };
    
    toolSizeSelect.innerHTML = '<option value="" disabled selected>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä</option>';
    
    const typeSizes = adminToolTypes[selectedType] || [];
    if (typeSizes.length > 0) {
        toolSizeSelect.disabled = false;
        typeSizes.forEach(size => {
            const option = document.createElement('option');
            option.value = size;
            option.textContent = size;
            toolSizeSelect.appendChild(option);
        });
    } else {
        toolSizeSelect.disabled = true;
        const option = document.createElement('option');
        option.value = '';
        option.textContent = '–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è';
        option.selected = true;
        toolSizeSelect.appendChild(option);
    }
}

function updateCellNumberSelect() {
    const machineSelect = document.getElementById('machine');
    const cellNumberSelect = document.getElementById('cellNumber');
    
    const selectedMachine = machineSelect.value;
    cellNumberSelect.innerHTML = '<option value="" disabled selected>–í—ã–±–µ—Ä–∏—Ç–µ —è—á–µ–π–∫—É</option>';
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è—á–µ–µ–∫ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ç–∞–Ω–∫–∞
    const adminMachines = JSON.parse(localStorage.getItem('admin_machines')) || [
        { id: 1, name: "–¢–°–ó-–§13-70", status: "active", cells: 24 },
        { id: 2, name: "KVL-1361A", status: "active", cells: 24 },
        { id: 3, name: "KVL-1260A", status: "active", cells: 24 }
    ];
    
    const selectedMachineData = adminMachines.find(m => m.name === selectedMachine);
    const totalCells = selectedMachineData ? selectedMachineData.cells : 24;

    const occupiedCells = tools
        .filter(tool => tool.machine === selectedMachine)
        .map(tool => tool.cellNumber);

    for (let i = 1; i <= totalCells; i++) {
        const option = document.createElement('option');
        option.value = i;
        option.textContent = i;

        if (occupiedCells.includes(i.toString())) {
            const tool = tools.find(t => t.cellNumber === i.toString() && t.machine === selectedMachine);
            option.textContent = `${tool.toolType} (–Ø—á–µ–π–∫–∞ ${i})`;
            option.disabled = true;
            option.style.color = '#888888';
            option.style.fontStyle = 'italic';
        }

        cellNumberSelect.appendChild(option);
    }
}

function showNotification(message, isError = false) {
    const notification = document.getElementById('notification');
    if (!notification) {
        console.error('Notification element not found');
        return;
    }
    
    notification.textContent = message;
    notification.className = isError ? 'notification error' : 'notification';
    notification.style.display = 'block';

    setTimeout(() => {
        notification.style.display = 'none';
    }, 3000);
}

// API —Ñ—É–Ω–∫—Ü–∏–∏
async function loadTools() {
    try {
        const response = await fetch(`${API_BASE}/tools`);
        if (response.ok) {
            tools = await response.json();
            updateTable();
            updateCellNumberSelect();
        } else {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:', response.status);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º:', error);
        showNotification('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º', true);
    }
}

async function addTool(tool) {
    try {
        const response = await fetch(`${API_BASE}/tools`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(tool)
        });
        
        if (response.ok) {
            await loadTools();
            showNotification('‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!');
        } else {
            const error = await response.text();
            console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞:', error);
            showNotification(error || '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞', true);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏:', error);
        showNotification('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º', true);
    }
}

async function deleteTool(cellNumber, machine) {
    if (!confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç?')) {
        return;
    }
    
    try {
        const response = await fetch(`${API_BASE}/delete?cell=${cellNumber}&machine=${encodeURIComponent(machine)}`, {
            method: 'GET'
        });
        
        if (response.ok) {
            await loadTools();
            showNotification('üóëÔ∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω!');
        } else {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞:', response.status);
            showNotification('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞', true);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:', error);
        showNotification('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞', true);
    }
}

function formatDate(date) {
    const today = new Date();
    const diffTime = Math.abs(today - date);
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

    if (diffDays === 1) {
        return "–°–µ–≥–æ–¥–Ω—è";
    } else if (diffDays === 2) {
        return "–í—á–µ—Ä–∞";
    } else {
        return `${diffDays - 1} –¥–Ω.`;
    }
}

function updateTable() {
    const toolTable = document.getElementById('toolTable');
    const machineSelect = document.getElementById('machine');
    const selectedMachine = machineSelect.value;
    
    if (!toolTable) {
        console.error('Table element not found');
        return;
    }
    
    toolTable.innerHTML = '';

    const filteredTools = selectedMachine && selectedMachine !== "–í—Å–µ" 
        ? tools.filter(tool => tool.machine === selectedMachine)
        : tools;

    if (filteredTools.length === 0) {
        toolTable.innerHTML = `
            <div class="no-tools">
                <div style="font-size: 3em; margin-bottom: 10px;">üì≠</div>
                <h3>–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</h3>
                <p>–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–æ—Ä–º—É –≤—ã—à–µ</p>
            </div>
        `;
        return;
    }

    const toolsByMachine = {};
    filteredTools.forEach(tool => {
        if (!toolsByMachine[tool.machine]) {
            toolsByMachine[tool.machine] = [];
        }
        toolsByMachine[tool.machine].push(tool);
    });

    Object.keys(toolsByMachine).forEach(machine => {
        const stationBlock = document.createElement('div');
        stationBlock.className = 'station-block';

        const stationName = document.createElement('div');
        stationName.className = 'station-name';
        stationName.innerHTML = `üè≠ ${machine}`;
        stationBlock.appendChild(stationName);

        const stationTable = document.createElement('table');
        stationTable.className = 'station-table';

        // –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        const headerRow = document.createElement('tr');
        ['–¢–∏–ø –∏–Ω—Å—Ç—Ä.', '–†–∞–∑–º–µ—Ä', '# —è—á–µ–π–∫–∏', '–î–∞—Ç–∞', '–î–µ–π—Å—Ç–≤–∏–µ'].forEach(headerText => {
            const header = document.createElement('th');
            header.textContent = headerText;
            headerRow.appendChild(header);
        });
        stationTable.appendChild(headerRow);

        // –î–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        toolsByMachine[machine].forEach(tool => {
            const row = document.createElement('tr');

            // –¢–∏–ø –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            const toolTypeCell = document.createElement('td');
            toolTypeCell.className = 'tool-type';
            toolTypeCell.innerHTML = `‚öô ${tool.toolType}`;
            row.appendChild(toolTypeCell);

            // –†–∞–∑–º–µ—Ä
            const toolSizeCell = document.createElement('td');
            toolSizeCell.className = 'tool-size';
            toolSizeCell.textContent = tool.toolSize || '-';
            row.appendChild(toolSizeCell);

            // –Ø—á–µ–π–∫–∞
            const cellNumberCell = document.createElement('td');
            cellNumberCell.className = 'cell-info';
            cellNumberCell.innerHTML = `üìç –Ø—á–µ–π–∫–∞ ${tool.cellNumber}`;
            row.appendChild(cellNumberCell);

            // –î–∞—Ç–∞
            const dateAddedCell = document.createElement('td');
            dateAddedCell.className = 'date-info';
            const daysAgo = formatDate(new Date(tool.dateAdded));
            dateAddedCell.innerHTML = `üïê ${daysAgo}`;
            row.appendChild(dateAddedCell);

            // –î–µ–π—Å—Ç–≤–∏–µ - —É–¥–∞–ª–µ–Ω–∏–µ
            const deleteCell = document.createElement('td');
            const deleteBtn = document.createElement('button');
            deleteBtn.className = 'delete-btn';
            deleteBtn.innerHTML = 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å';
            deleteBtn.onclick = (e) => {
                e.preventDefault();
                if (confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç?')) {
                    deleteTool(tool.cellNumber, tool.machine);
                }
            };
            deleteCell.appendChild(deleteBtn);
            row.appendChild(deleteCell);

            stationTable.appendChild(row);
        });

        stationBlock.appendChild(stationTable);
        toolTable.appendChild(stationBlock);
    });
    
    console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: ${filteredTools.length}`);
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
window.debugTools = {
    getTools: () => tools,
    getSelectedMachine: () => document.getElementById('machine')?.value,
    getSelectedCell: () => document.getElementById('cellNumber')?.value,
    forceUpdate: () => {
        updateTable();
        updateCellNumberSelect();
    },
    testAPI: async () => {
        try {
            const response = await fetch(`${API_BASE}/tools`);
            const data = await response.json();
            console.log('API Test:', data);
            alert(`‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç. –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: ${data.length}`);
        } catch (error) {
            console.error('API Test Error:', error);
            alert('‚ùå API –æ—à–∏–±–∫–∞: ' + error.message);
        }
    },
    addTestData: () => {
        const testTools = [
            {
                machine: '–¢–°–ó-–§13-70',
                toolType: '–§—Ä–µ–∑–∞',
                toolSize: '2.5',
                cellNumber: '15',
                dateAdded: new Date().toISOString()
            },
            {
                machine: '–¢–°–ó-–§13-70',
                toolType: '–°–≤–µ—Ä–ª–æ',
                toolSize: '4.0',
                cellNumber: '8',
                dateAdded: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString()
            },
            {
                machine: 'KVL-1361A',
                toolType: '–†–∞–∑–≤–µ—Ä—Ç–∫–∞',
                toolSize: '6.0',
                cellNumber: '12',
                dateAdded: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString()
            }
        ];
        
        testTools.forEach(tool => {
            if (!tools.some(t => t.cellNumber === tool.cellNumber && t.machine === tool.machine)) {
                tools.push(tool);
            }
        });
        
        updateTable();
        updateCellNumberSelect();
        showNotification('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã');
    },
    clearAllData: () => {
        if (confirm('–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ?')) {
            tools = [];
            updateTable();
            updateCellNumberSelect();
            showNotification('üóëÔ∏è –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
        }
    },
    exportData: () => {
        const dataStr = JSON.stringify(tools, null, 2);
        const blob = new Blob([dataStr], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `tools_backup_${new Date().toISOString().split('T')[0]}.json`;
        a.click();
        URL.revokeObjectURL(url);
        showNotification('üíæ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
    },
    importData: () => {
        const input = document.createElement('input');
        input.type = 'file';
        input.accept = '.json';
        input.onchange = (e) => {
            const file = e.target.files[0];
            const reader = new FileReader();
            reader.onload = (event) => {
                try {
                    const importedTools = JSON.parse(event.target.result);
                    if (Array.isArray(importedTools)) {
                        tools = importedTools;
                        updateTable();
                        updateCellNumberSelect();
                        showNotification('üì• –î–∞–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
                    } else {
                        showNotification('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞', true);
                    }
                } catch (error) {
                    showNotification('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞', true);
                }
            };
            reader.readAsText(file);
        };
        input.click();
    }
};

// –õ–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
async function checkLicense() {
    try {
        const companySize = 1; // –ú–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        const usageType = 'commercial'; // –∏–ª–∏ 'non-commercial'
        
        const response = await fetch(`${API_BASE}/license/check`, {
            headers: {
                'X-Company-Size': companySize,
                'X-Usage-Type': usageType
            }
        });
        
        if (response.ok) {
            const licenseInfo = await response.json();
            if (licenseInfo.status === 'commercial') {
                console.log('üìÑ –õ–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', licenseInfo.message);
            }
        }
    } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–∫–∞–ª—å–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º (fallback)
function saveToolsToLocalStorage() {
    try {
        localStorage.setItem('tools_backup', JSON.stringify(tools));
    } catch (error) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ localStorage:', error);
    }
}

function loadToolsFromLocalStorage() {
    try {
        const savedTools = localStorage.getItem('tools_backup');
        if (savedTools) {
            const parsedTools = JSON.parse(savedTools);
            if (Array.isArray(parsedTools)) {
                tools = parsedTools;
                return true;
            }
        }
    } catch (error) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ localStorage:', error);
    }
    return false;
}

// –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
function setupAutoSave() {
    let saveTimeout;
    
    const originalPush = Array.prototype.push;
    Array.prototype.push = function() {
        const result = originalPush.apply(this, arguments);
        if (this === tools) {
            clearTimeout(saveTimeout);
            saveTimeout = setTimeout(saveToolsToLocalStorage, 1000);
        }
        return result;
    };
    
    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const originalSplice = Array.prototype.splice;
    Array.prototype.splice = function() {
        const result = originalSplice.apply(this, arguments);
        if (this === tools) {
            clearTimeout(saveTimeout);
            saveTimeout = setTimeout(saveToolsToLocalStorage, 1000);
        }
        return result;
    };
}

// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
function restoreData() {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–∞
    loadTools();
    
    // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º localStorage
    setTimeout(() => {
        if (tools.length === 0) {
            if (loadToolsFromLocalStorage()) {
                console.log('üì• –î–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ localStorage');
                updateTable();
                updateCellNumberSelect();
                showNotification('üì• –î–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏');
            }
        }
    }, 2000);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
function initializeExtendedFeatures() {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    setupAutoSave();
    
    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    restoreData();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    window.addEventListener('beforeunload', saveToolsToLocalStorage);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
    document.addEventListener('keydown', (e) => {
        // Ctrl+S - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
        if (e.ctrlKey && e.key === 's') {
            e.preventDefault();
            saveToolsToLocalStorage();
            showNotification('üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
        }
        
        // Ctrl+L - –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫
        if (e.ctrlKey && e.key === 'l') {
            e.preventDefault();
            loadTools();
            showNotification('üîÑ –°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω');
        }
        
        // F1 - —Å–ø—Ä–∞–≤–∫–∞
        if (e.key === 'F1') {
            e.preventDefault();
            alert(`–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏:
Ctrl+S - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
Ctrl+L - –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫
F1 - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

–î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
debugTools.addTestData() - –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
debugTools.exportData() - —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
debugTools.importData() - –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
debugTools.clearAllData() - –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ`);
        }
    });
    
    console.log('üîß –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
setTimeout(checkLicense, 5000);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
setTimeout(initializeExtendedFeatures, 1000);

console.log('üõ†Ô∏è Tool Management System loaded successfully');

// ASCII —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è —á–µ—Ä–Ω–æ-–±–µ–ª–æ–≥–æ —Å—Ç–∏–ª—è
document.addEventListener('DOMContentLoaded', function() {
    // –î–æ–±–∞–≤–ª—è–µ–º ASCII —ç—Ñ—Ñ–µ–∫—Ç –ø–µ—á–∞—Ç–∞–Ω–∏—è –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    const asciiTitles = document.querySelectorAll('h1, h2');
    
    asciiTitles.forEach(title => {
        const originalText = title.textContent;
        title.textContent = '';
        let i = 0;
        
        const typeWriter = setInterval(() => {
            if (i < originalText.length) {
                title.textContent += originalText.charAt(i);
                i++;
            } else {
                clearInterval(typeWriter);
                // –î–æ–±–∞–≤–ª—è–µ–º –º–∏–≥–∞—é—â–∏–π –∫—É—Ä—Å–æ—Ä
                const cursor = document.createElement('span');
                cursor.className = 'terminal-cursor';
                cursor.textContent = '_';
                title.appendChild(cursor);
                
                // –£–±–∏—Ä–∞–µ–º –∫—É—Ä—Å–æ—Ä —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
                setTimeout(() => {
                    cursor.style.display = 'none';
                }, 3000);
            }
        }, 50);
    });

    // ASCII —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const originalShowNotification = window.showNotification;
    window.showNotification = function(message, isError = false) {
        const notification = document.getElementById('notification');
        if (notification) {
            notification.textContent = '';
            let i = 0;
            
            const typeNotification = setInterval(() => {
                if (i < message.length) {
                    notification.textContent += message.charAt(i);
                    i++;
                } else {
                    clearInterval(typeNotification);
                }
            }, 30);
            
            notification.className = isError ? 'notification error' : 'notification';
            notification.style.display = 'block';

            setTimeout(() => {
                notification.style.display = 'none';
            }, 3000);
        }
    };

    // –î–æ–±–∞–≤–ª—è–µ–º ASCII –∞—Ä—Ç –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫
    const addAsciiArt = () => {
        const asciiArt = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë        TOOL MANAGEMENT SYSTEM         ‚ïë
‚ïë              v1.0.0                   ‚ïë
‚ïë                                       ‚ïë
‚ïë      [‚öô] [üîß] [üè≠] [üìç] [üïê]        ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
        `.trim();
        
        const header = document.querySelector('.header');
        if (header) {
            const artElement = document.createElement('pre');
            artElement.style.cssText = `
                text-align: center;
                color: #ffffff;
                font-family: 'Courier New', monospace;
                margin: 10px 0;
                line-height: 1.2;
                text-shadow: 0 0 10px rgba(255, 255, 255, 0.5);
                white-space: pre;
            `;
            artElement.textContent = asciiArt;
            header.insertBefore(artElement, header.firstChild);
        }
    };

    // –î–æ–±–∞–≤–ª—è–µ–º ASCII –∞—Ä—Ç –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
    setTimeout(addAsciiArt, 100);

    console.log('üñ•Ô∏è  –ß–ï–†–ù–û-–ë–ï–õ–´–ô ASCII –°–¢–ò–õ–¨ –ê–ö–¢–ò–í–ò–†–û–í–ê–ù');
    console.log('‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê');
    console.log('‚îÇ      TOOL MANAGEMENT SYSTEM        ‚îÇ');
    console.log('‚îÇ        MONOCHROME EDITION          ‚îÇ');
    console.log('‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò');
});
