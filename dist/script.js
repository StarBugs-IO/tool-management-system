// script.js - –í–µ—Ä—Å–∏—è —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
const API_BASE = `${window.location.origin}/api`;
let tools = [];
let isConnected = true;
let syncInProgress = false;
let lastSyncTime = 0;
let lastChangeTime = 0;
let isHostClient = false;
let serverIp = '';
let isMobileDevice = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);

// –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã
let formState = {
    machine: '',
    toolType: '',
    toolSize: '',
    cellNumber: ''
};

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–ø–∞–¥–∞—é—â–∏—Ö —Å–ø–∏—Å–∫–æ–≤
let selectStates = {
    machine: '',
    toolType: '',
    toolSize: '',
    cellNumber: ''
};

document.addEventListener('DOMContentLoaded', function() {
    initializeApp();
});

async function initializeApp() {
    await loadDataFromServer();
    setupEventListeners();
    
    // –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ä—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    if (!isMobileDevice) {
        startRealTimeSync();
    }
    
    restoreFormState();
    updateConnectionInfo();
}

function setupEventListeners() {
    const toolForm = document.getElementById('toolForm');
    const toolTypeSelect = document.getElementById('toolType');
    const machineSelect = document.getElementById('machine');
    const toolSizeSelect = document.getElementById('toolSize');
    const cellNumberSelect = document.getElementById('cellNumber');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–ø–∞–¥–∞—é—â–∏—Ö —Å–ø–∏—Å–∫–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    machineSelect.addEventListener('change', function() {
        formState.machine = this.value;
        selectStates.machine = this.value;
        updateCellNumberSelect();
        updateTable();
    });

    toolTypeSelect.addEventListener('change', function() {
        formState.toolType = this.value;
        selectStates.toolType = this.value;
        updateToolSizeSelect();
    });

    toolSizeSelect.addEventListener('change', function() {
        formState.toolSize = this.value;
        selectStates.toolSize = this.value;
    });

    cellNumberSelect.addEventListener('change', function() {
        formState.cellNumber = this.value;
        selectStates.cellNumber = this.value;
    });

    toolForm.addEventListener('submit', async function(event) {
        event.preventDefault();
        await handleToolAddition();
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    document.getElementById('refreshBtn')?.addEventListener('click', function() {
        manualRefresh();
    });
}

function restoreFormState() {
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if (selectStates.machine) {
        document.getElementById('machine').value = selectStates.machine;
    }
    if (selectStates.toolType) {
        document.getElementById('toolType').value = selectStates.toolType;
        updateToolSizeSelect();
    }
    if (selectStates.toolSize) {
        document.getElementById('toolSize').value = selectStates.toolSize;
    }
    if (selectStates.cellNumber) {
        document.getElementById('cellNumber').value = selectStates.cellNumber;
    }
}

async function handleToolAddition() {
    const machine = document.getElementById('machine').value;
    const toolType = document.getElementById('toolType').value;
    const toolSize = document.getElementById('toolSize').value;
    const cellNumber = document.getElementById('cellNumber').value;

    if (!cellNumber || !machine || !toolType) {
        showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!', true);
        return;
    }
    
    const tool = { machine, toolType, toolSize, cellNumber };
    await addTool(tool);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —Å–±—Ä–æ—Å–æ–º
    const currentMachine = selectStates.machine;
    const currentToolType = selectStates.toolType;
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–∞–Ω–æ–∫ –∏ —Ç–∏–ø
    document.getElementById('toolForm').reset();
    formState = { machine: '', toolType: '', toolSize: '', cellNumber: '' };
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–Ω–æ–∫ –∏ —Ç–∏–ø –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    if (currentMachine) {
        document.getElementById('machine').value = currentMachine;
        selectStates.machine = currentMachine;
    }
    if (currentToolType) {
        document.getElementById('toolType').value = currentToolType;
        selectStates.toolType = currentToolType;
    }
    
    updateToolSizeSelect();
    updateCellNumberSelect();
}

async function loadDataFromServer() {
    try {
        const response = await fetch(`${API_BASE}/full-data`);
        if (response.ok) {
            const serverData = await response.json();
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
            saveCurrentSelectValues();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã–º–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
            if (serverData.tools) {
                window.toolDatabase.saveTools(serverData.tools);
                tools = serverData.tools;
            }
            if (serverData.machines) {
                window.toolDatabase.saveMachines(serverData.machines);
            }
            if (serverData.toolTypes) {
                window.toolDatabase.saveToolTypes(serverData.toolTypes);
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
            isHostClient = serverData.is_host || false;
            serverIp = serverData.server_ip || window.location.hostname;
            
            isConnected = true;
            lastSyncTime = serverData.timestamp || Date.now() / 1000;
            updateInterface();
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            restoreSelectValues();
        }
    } catch (error) {
        console.log('–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ');
        isConnected = false;
        loadLocalData();
    }
}

function saveCurrentSelectValues() {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤—ã–ø–∞–¥–∞—é—â–∏—Ö —Å–ø–∏—Å–∫–æ–≤
    selectStates.machine = document.getElementById('machine').value;
    selectStates.toolType = document.getElementById('toolType').value;
    selectStates.toolSize = document.getElementById('toolSize').value;
    selectStates.cellNumber = document.getElementById('cellNumber').value;
}

function restoreSelectValues() {
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤—ã–ø–∞–¥–∞—é—â–∏—Ö —Å–ø–∏—Å–∫–æ–≤ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (selectStates.machine) {
        const machineSelect = document.getElementById('machine');
        if (Array.from(machineSelect.options).some(opt => opt.value === selectStates.machine)) {
            machineSelect.value = selectStates.machine;
        }
    }
    
    if (selectStates.toolType) {
        const toolTypeSelect = document.getElementById('toolType');
        if (Array.from(toolTypeSelect.options).some(opt => opt.value === selectStates.toolType)) {
            toolTypeSelect.value = selectStates.toolType;
            updateToolSizeSelect();
        }
    }
    
    if (selectStates.toolSize) {
        const toolSizeSelect = document.getElementById('toolSize');
        if (Array.from(toolSizeSelect.options).some(opt => opt.value === selectStates.toolSize)) {
            toolSizeSelect.value = selectStates.toolSize;
        }
    }
    
    if (selectStates.cellNumber) {
        const cellNumberSelect = document.getElementById('cellNumber');
        if (Array.from(cellNumberSelect.options).some(opt => opt.value === selectStates.cellNumber)) {
            cellNumberSelect.value = selectStates.cellNumber;
        }
    }
}

function loadLocalData() {
    tools = window.toolDatabase.getTools();
    updateInterface();
}

function updateInterface() {
    updateMachineSelect();
    updateToolTypeSelect();
    updateCellNumberSelect();
    updateTable();
    updateConnectionInfo();
}

function updateConnectionInfo() {
    const connectionInfo = document.getElementById('connectionInfo');
    if (!connectionInfo) return;

    let infoHTML = '';
    
    if (isHostClient) {
        infoHTML = `
            <div class="connection-status">
                <span class="status-indicator host">üîí –•–æ—Å—Ç</span>
                <span class="ip-address">IP: ${serverIp}</span>
                <a href="/admin/index.html" class="admin-link">–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</a>
            </div>
        `;
    } else {
        infoHTML = `
            <div class="connection-status">
                <span class="status-indicator client">üîó –ö–ª–∏–µ–Ω—Ç</span>
                <span class="ip-address">–ü–æ–¥–∫–ª—é—á–µ–Ω –∫: ${serverIp}</span>
                ${isMobileDevice ? '<span class="mobile-badge">üì± –ú–æ–±–∏–ª—å–Ω—ã–π</span>' : ''}
            </div>
        `;
    }
    
    connectionInfo.innerHTML = infoHTML;
}

function updateMachineSelect() {
    const machineSelect = document.getElementById('machine');
    const currentValue = selectStates.machine || machineSelect.value;
    const machines = window.toolDatabase.getMachines();
    
    machineSelect.innerHTML = '<option value="" disabled selected>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–Ω–æ–∫</option><option value="–í—Å–µ">–í—Å–µ —Å—Ç–∞–Ω–∫–∏</option>';
    
    machines.forEach(machine => {
        if (machine.status === 'active') {
            const option = document.createElement('option');
            option.value = machine.name;
            option.textContent = machine.name;
            machineSelect.appendChild(option);
        }
    });
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (currentValue && Array.from(machineSelect.options).some(opt => opt.value === currentValue)) {
        machineSelect.value = currentValue;
        selectStates.machine = currentValue;
    }
}

function updateToolTypeSelect() {
    const toolTypeSelect = document.getElementById('toolType');
    const currentValue = selectStates.toolType || toolTypeSelect.value;
    const toolTypes = window.toolDatabase.getToolTypes();
    
    toolTypeSelect.innerHTML = '<option value="" disabled selected>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø</option>';
    
    Object.keys(toolTypes).forEach(type => {
        const option = document.createElement('option');
        option.value = type;
        option.textContent = type;
        toolTypeSelect.appendChild(option);
    });
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    if (currentValue && Array.from(toolTypeSelect.options).some(opt => opt.value === currentValue)) {
        toolTypeSelect.value = currentValue;
        selectStates.toolType = currentValue;
    }
}

function updateToolSizeSelect() {
    const toolTypeSelect = document.getElementById('toolType');
    const toolSizeSelect = document.getElementById('toolSize');
    const currentValue = selectStates.toolSize || toolSizeSelect.value;
    const selectedType = toolTypeSelect.value;
    const toolTypes = window.toolDatabase.getToolTypes();
    
    toolSizeSelect.innerHTML = '<option value="" disabled selected>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä</option>';
    
    const typeSizes = toolTypes[selectedType] || [];
    if (typeSizes.length > 0) {
        toolSizeSelect.disabled = false;
        typeSizes.forEach(size => {
            const option = document.createElement('option');
            option.value = size;
            option.textContent = size;
            toolSizeSelect.appendChild(option);
        });
    } else {
        toolSizeSelect.disabled = true;
        const option = document.createElement('option');
        option.value = '';
        option.textContent = '–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è';
        option.selected = true;
        toolSizeSelect.appendChild(option);
    }
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    if (currentValue && Array.from(toolSizeSelect.options).some(opt => opt.value === currentValue)) {
        toolSizeSelect.value = currentValue;
        selectStates.toolSize = currentValue;
    }
}

function updateCellNumberSelect() {
    const machineSelect = document.getElementById('machine');
    const cellNumberSelect = document.getElementById('cellNumber');
    const currentValue = selectStates.cellNumber || cellNumberSelect.value;
    const selectedMachine = machineSelect.value;
    
    cellNumberSelect.innerHTML = '<option value="" disabled selected>–í—ã–±–µ—Ä–∏—Ç–µ —è—á–µ–π–∫—É</option>';
    
    if (!selectedMachine || selectedMachine === '–í—Å–µ') return;
    
    const machines = window.toolDatabase.getMachines();
    const selectedMachineData = machines.find(m => m.name === selectedMachine);
    const totalCells = selectedMachineData ? selectedMachineData.cells : 24;

    const occupiedCells = tools
        .filter(tool => tool.machine === selectedMachine)
        .map(tool => tool.cellNumber);

    for (let i = 1; i <= totalCells; i++) {
        const option = document.createElement('option');
        option.value = i;
        option.textContent = i;

        if (occupiedCells.includes(i.toString())) {
            option.textContent = `${i} (–∑–∞–Ω—è—Ç–∞)`;
            option.disabled = true;
            option.style.color = '#888888';
        }

        cellNumberSelect.appendChild(option);
    }
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    if (currentValue && Array.from(cellNumberSelect.options).some(opt => opt.value === currentValue)) {
        cellNumberSelect.value = currentValue;
        selectStates.cellNumber = currentValue;
    }
}

async function addTool(tool) {
    try {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
        saveCurrentSelectValues();
        
        // –õ–æ–∫–∞–ª—å–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
        window.toolDatabase.addTool(tool);
        tools = window.toolDatabase.getTools();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        updateCellNumberSelect();
        updateTable();
        showNotification('‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω!');
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º
        if (isConnected) {
            await syncWithServer();
        }
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        restoreSelectValues();
        
    } catch (error) {
        showNotification('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞', true);
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        restoreSelectValues();
    }
}

async function deleteTool(cellNumber, machine) {
    if (!confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç?')) return;
    
    try {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        saveCurrentSelectValues();
        
        // –õ–æ–∫–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
        window.toolDatabase.deleteTool(cellNumber, machine);
        tools = window.toolDatabase.getTools();
        
        updateCellNumberSelect();
        updateTable();
        showNotification('üóëÔ∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω!');
        
        if (isConnected) {
            await syncWithServer();
        }
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
        restoreSelectValues();
        
    } catch (error) {
        showNotification('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞', true);
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        restoreSelectValues();
    }
}

async function syncWithServer() {
    if (!isConnected || syncInProgress) return;
    
    syncInProgress = true;
    try {
        const allData = window.toolDatabase.getAll();
        const response = await fetch(`${API_BASE}/sync`, {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify(allData)
        });
        
        if (response.ok) {
            const result = await response.json();
            lastSyncTime = result.timestamp || Date.now() / 1000;
        }
    } catch (error) {
        isConnected = false;
    } finally {
        syncInProgress = false;
    }
}

// –†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
async function manualRefresh() {
    showNotification('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...');
    await loadDataFromServer();
    showNotification('‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ü–ö)
async function checkForChanges() {
    if (!isConnected || syncInProgress || isMobileDevice) return;
    
    try {
        const response = await fetch(`${API_BASE}/changes?since=${lastChangeTime}`);
        if (response.ok) {
            const changeData = await response.json();
            
            if (changeData.changes && changeData.changes.length > 0) {
                // –ï—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è - –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                await loadDataFromServer();
                lastChangeTime = changeData.current_timestamp;
            }
        }
    } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    }
}

// –†–µ–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ü–ö)
function startRealTimeSync() {
    if (isMobileDevice) return;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –ü–ö
    setInterval(() => {
        if (isConnected && document.visibilityState === 'visible') {
            checkForChanges();
        }
    }, 3000);
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ü–ö
    setInterval(() => {
        if (isConnected && document.visibilityState === 'visible' && !syncInProgress) {
            syncWithServer();
        }
    }, 10000);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    document.addEventListener('visibilitychange', () => {
        if (document.visibilityState === 'visible' && isConnected && !isMobileDevice) {
            checkForChanges();
        }
    });
}

function formatDate(date) {
    const today = new Date();
    const diffTime = Math.abs(today - date);
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

    if (diffDays === 1) return "–°–µ–≥–æ–¥–Ω—è";
    if (diffDays === 2) return "–í—á–µ—Ä–∞";
    return `${diffDays - 1} –¥–Ω. –Ω–∞–∑–∞–¥`;
}

function updateTable() {
    const toolTable = document.getElementById('toolTable');
    const machineSelect = document.getElementById('machine');
    const selectedMachine = machineSelect.value;
    
    if (!toolTable) return;
    
    const filteredTools = selectedMachine && selectedMachine !== "–í—Å–µ" 
        ? tools.filter(tool => tool.machine === selectedMachine)
        : tools;

    toolTable.innerHTML = '';

    // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ –∫–Ω–æ–ø–∫–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const headerRow = document.createElement('div');
    headerRow.className = 'table-header-row';
    headerRow.innerHTML = `
        <div class="header-left">
            <div id="connectionInfo"></div>
        </div>
        <div class="header-center">
            <span class="update-time">üìÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${new Date().toLocaleString('ru-RU')}</span>
            ${isMobileDevice ? '<div class="mobile-hint">–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–û–±–Ω–æ–≤–∏—Ç—å" –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏</div>' : ''}
        </div>
        <div class="header-right">
            <button id="refreshBtn" class="refresh-btn" title="–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ">üîÑ –û–±–Ω–æ–≤–∏—Ç—å</button>
        </div>
    `;
    toolTable.appendChild(headerRow);

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    document.getElementById('refreshBtn')?.addEventListener('click', manualRefresh);

    if (filteredTools.length === 0) {
        const noToolsDiv = document.createElement('div');
        noToolsDiv.className = 'no-tools';
        noToolsDiv.innerHTML = `
            <div style="font-size: 3em; margin-bottom: 10px;">üì≠</div>
            <h3>–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</h3>
            <p>–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–æ—Ä–º—É –≤—ã—à–µ</p>
        `;
        toolTable.appendChild(noToolsDiv);
        return;
    }

    const toolsByMachine = {};
    filteredTools.forEach(tool => {
        if (!toolsByMachine[tool.machine]) {
            toolsByMachine[tool.machine] = [];
        }
        toolsByMachine[tool.machine].push(tool);
    });

    Object.keys(toolsByMachine).forEach(machine => {
        const stationBlock = document.createElement('div');
        stationBlock.className = 'station-block';

        const stationName = document.createElement('div');
        stationName.className = 'station-name';
        stationName.innerHTML = `${machine}`;
        stationBlock.appendChild(stationName);
        
        const stationTable = document.createElement('table');
        stationTable.className = 'station-table';

        const headerRow = document.createElement('tr');
        ['–¢–∏–ø', '–†–∞–∑–º–µ—Ä', '–Ø—á–µ–π–∫–∞', '–î–æ–±–∞–≤–ª–µ–Ω', ''].forEach(headerText => {
            const header = document.createElement('th');
            header.textContent = headerText;
            headerRow.appendChild(header);
        });
        stationTable.appendChild(headerRow);

        toolsByMachine[machine].forEach(tool => {
            const row = document.createElement('tr');

            const toolTypeCell = document.createElement('td');
            toolTypeCell.className = 'tool-type';
            toolTypeCell.textContent = tool.toolType;
            row.appendChild(toolTypeCell);

            const toolSizeCell = document.createElement('td');
            toolSizeCell.className = 'tool-size';
            toolSizeCell.textContent = tool.toolSize || '-';
            row.appendChild(toolSizeCell);

            const cellNumberCell = document.createElement('td');
            cellNumberCell.className = 'cell-info';
            cellNumberCell.textContent = tool.cellNumber;
            row.appendChild(cellNumberCell);

            const dateAddedCell = document.createElement('td');
            dateAddedCell.className = 'date-info';
            const daysAgo = formatDate(new Date(tool.dateAdded));
            dateAddedCell.textContent = daysAgo;
            row.appendChild(dateAddedCell);

            const deleteCell = document.createElement('td');
            const deleteBtn = document.createElement('button');
            deleteBtn.className = 'delete-btn';
            deleteBtn.innerHTML = 'üóëÔ∏è';
            deleteBtn.title = '–£–¥–∞–ª–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç';
            deleteBtn.onclick = async (e) => {
                e.preventDefault();
                await deleteTool(tool.cellNumber, tool.machine);
            };
            deleteCell.appendChild(deleteBtn);
            row.appendChild(deleteCell);

            stationTable.appendChild(row);
        });

        stationBlock.appendChild(stationTable);
        toolTable.appendChild(stationBlock);
    });
}

function showNotification(message, isError = false) {
    const notification = document.getElementById('notification');
    if (!notification) return;
    
    notification.textContent = message;
    notification.className = isError ? 'notification error' : 'notification';
    notification.style.display = 'block';

    setTimeout(() => {
        notification.style.display = 'none';
    }, 2000);
}

// –î–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞ script.js

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤–µ–∑–¥ GitHub
async function updateGitHubStars() {
    try {
        const response = await fetch('https://api.github.com/repos/StarBugs-IO/tool-management-system');
        if (response.ok) {
            const repoData = await response.json();
            const stars = repoData.stargazers_count;
            const starsElement = document.getElementById('githubStars');
            if (starsElement) {
                starsElement.textContent = stars;
            }
        }
    } catch (error) {
        console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ GitHub');
    }
}

// –û–±–Ω–æ–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é initializeApp():
async function initializeApp() {
    await loadDataFromServer();
    setupEventListeners();
    
    // –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ä—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    if (!isMobileDevice) {
        startRealTimeSync();
    }
    
    restoreFormState();
    updateConnectionInfo();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–≤–µ–∑–¥—ã GitHub
    updateGitHubStars();
}