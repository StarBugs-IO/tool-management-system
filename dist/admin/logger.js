// logger.js - –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
class OperationLogger {
    constructor() {
        this.logFileName = 'tool_management_operations.log';
        this.maxFileSize = 5 * 1024 * 1024; // 5MB –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        this.init();
    }

    init() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤
        if (!this.logFileExists()) {
            this.createLogFile();
        }
    }

    logFileExists() {
        try {
            const logFile = localStorage.getItem(this.logFileName);
            return logFile !== null;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤:', error);
            return false;
        }
    }

    createLogFile() {
        const initialLog = {
            version: '1.0.0',
            created: new Date().toISOString(),
            entries: []
        };
        this.saveLogFile(initialLog);
        console.log('‚úÖ –§–∞–π–ª –ª–æ–≥–æ–≤ —Å–æ–∑–¥–∞–Ω');
    }

    saveLogFile(logData) {
        try {
            localStorage.setItem(this.logFileName, JSON.stringify(logData));
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤:', error);
            this.rotateLogs(); // –ü—ã—Ç–∞–µ–º—Å—è –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏
        }
    }

    getLogFile() {
        try {
            const logFile = localStorage.getItem(this.logFileName);
            return logFile ? JSON.parse(logFile) : null;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤:', error);
            return null;
        }
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥
    addEntry(action, details = {}) {
        const logEntry = {
            id: Date.now() + Math.random().toString(36).substr(2, 9),
            timestamp: new Date().toISOString(),
            action: action,
            details: details,
            userAgent: navigator.userAgent,
            url: window.location.href
        };

        const logFile = this.getLogFile();
        if (logFile && logFile.entries) {
            logFile.entries.push(logEntry);
            
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000)
            if (logFile.entries.length > 1000) {
                logFile.entries = logFile.entries.slice(-1000);
            }
            
            this.saveLogFile(logFile);
        } else {
            console.error('–§–∞–π–ª –ª–æ–≥–æ–≤ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π');
            this.createLogFile();
            this.addEntry(action, details); // –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É
        }

        console.log('üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è:', action);
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
    getLogs(options = {}) {
        const { 
            limit = 100, 
            offset = 0, 
            actionFilter = null,
            dateFrom = null,
            dateTo = null 
        } = options;

        const logFile = this.getLogFile();
        if (!logFile || !logFile.entries) {
            return [];
        }

        let filteredLogs = logFile.entries;

        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–µ–π—Å—Ç–≤–∏—é
        if (actionFilter) {
            filteredLogs = filteredLogs.filter(entry => 
                entry.action.toLowerCase().includes(actionFilter.toLowerCase())
            );
        }

        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–µ
        if (dateFrom) {
            filteredLogs = filteredLogs.filter(entry => 
                new Date(entry.timestamp) >= new Date(dateFrom)
            );
        }

        if (dateTo) {
            filteredLogs = filteredLogs.filter(entry => 
                new Date(entry.timestamp) <= new Date(dateTo)
            );
        }

        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        filteredLogs.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));

        // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        return filteredLogs.slice(offset, offset + limit);
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ª–æ–≥–æ–≤
    getLogStats() {
        const logFile = this.getLogFile();
        if (!logFile || !logFile.entries || logFile.entries.length === 0) {
            return { 
                total: 0, 
                actions: {},
                period: {
                    first: null,
                    last: null
                }
            };
        }

        const entries = logFile.entries;
        const stats = {
            total: entries.length,
            actions: {},
            period: {
                first: entries[entries.length - 1].timestamp, // –°–∞–º–∞—è —Å—Ç–∞—Ä–∞—è –∑–∞–ø–∏—Å—å
                last: entries[0].timestamp // –°–∞–º–∞—è –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å
            }
        };

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –¥–µ–π—Å—Ç–≤–∏–π
        entries.forEach(entry => {
            stats.actions[entry.action] = (stats.actions[entry.action] || 0) + 1;
        });

        return stats;
    }

    // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤
    rotateLogs() {
        const logFile = this.getLogFile();
        if (logFile && logFile.entries) {
            // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 500 –∑–∞–ø–∏—Å–µ–π
            logFile.entries = logFile.entries.slice(-500);
            this.saveLogFile(logFile);
            console.log('üîÑ –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã, –æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 500 –∑–∞–ø–∏—Å–µ–π');
        }
    }

    // –≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª
    exportLogs(format = 'json') {
        const logFile = this.getLogFile();
        if (!logFile) return null;

        if (format === 'json') {
            const dataStr = JSON.stringify(logFile, null, 2);
            const dataBlob = new Blob([dataStr], { type: 'application/json' });
            return URL.createObjectURL(dataBlob);
        } else if (format === 'csv') {
            const csv = this.convertToCSV(logFile.entries);
            const dataBlob = new Blob([csv], { type: 'text/csv' });
            return URL.createObjectURL(dataBlob);
        }

        return null;
    }

    convertToCSV(entries) {
        const headers = ['ID', 'Timestamp', 'Action', 'Details', 'URL'];
        const csvRows = [headers.join(',')];

        entries.forEach(entry => {
            const row = [
                entry.id,
                `"${entry.timestamp}"`,
                `"${entry.action}"`,
                `"${JSON.stringify(entry.details).replace(/"/g, '""')}"`,
                `"${entry.url}"`
            ];
            csvRows.push(row.join(','));
        });

        return csvRows.join('\n');
    }

    // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ª–æ–≥–æ–≤
    clearLogs() {
        this.createLogFile();
        console.log('üóëÔ∏è –í—Å–µ –ª–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã');
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞
window.operationLogger = new OperationLogger();