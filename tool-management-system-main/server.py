import http.server
import socketserver
import json
import threading
import webbrowser
import socket
import os
from datetime import datetime

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
tools_data = []
DATA_FILE = 'tools_data.json'
data_lock = threading.Lock()

def load_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞"""
    global tools_data
    try:
        if os.path.exists(DATA_FILE):
            with open(DATA_FILE, 'r', encoding='utf-8') as f:
                tools_data = json.load(f)
            print(f"üì• –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ {DATA_FILE}: {len(tools_data)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
        else:
            tools_data = []
            print("üìù –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        tools_data = []

def save_data():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª"""
    try:
        with open(DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(tools_data, f, ensure_ascii=False, indent=2)
        print(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {DATA_FILE}: {len(tools_data)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

def get_ip_address():
    """–ü–æ–ª—É—á–∞–µ—Ç IP –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å IP
        with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as s:
            s.connect(("8.8.8.8", 80))
            ip_address = s.getsockname()[0]
        return ip_address
    except:
        return "localhost"

class ToolHandler(http.server.SimpleHTTPRequestHandler):
    def do_GET(self):
        global tools_data
        
        if self.path == '/api/tools':
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            
            with data_lock:
                self.wfile.write(json.dumps(tools_data).encode())
            return
            
        elif self.path.startswith('/api/delete'):
            from urllib.parse import parse_qs, urlparse
            query = parse_qs(urlparse(self.path).query)
            cell_number = query.get('cell', [None])[0]
            machine = query.get('machine', [None])[0]
            
            if cell_number and machine:
                with data_lock:
                    initial_count = len(tools_data)
                    tools_data[:] = [t for t in tools_data if not (str(t.get('cellNumber', '')) == cell_number and t.get('machine', '') == machine)]
                    
                    if len(tools_data) < initial_count:
                        save_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
                        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {machine}, —è—á–µ–π–∫–∞ {cell_number}")
                
                self.send_response(200)
                self.send_header('Access-Control-Allow-Origin', '*')
                self.end_headers()
                return
                
        if self.path == '/':
            self.path = '/index.html'
        return super().do_GET()
    
    def do_POST(self):
        global tools_data
        
        if self.path == '/api/tools':
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            new_tool = json.loads(post_data.decode())
            
            with data_lock:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç–∞ –ª–∏ —è—á–µ–π–∫–∞
                if any(t['cellNumber'] == new_tool['cellNumber'] and t['machine'] == new_tool['machine'] for t in tools_data):
                    self.send_response(400)
                    self.send_header('Access-Control-Allow-Origin', '*')
                    self.end_headers()
                    self.wfile.write(b'Cell already occupied')
                    return
                
                tools_data.append(new_tool)
                save_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {new_tool['toolType']} {new_tool.get('toolSize', '')} –Ω–∞ {new_tool['machine']}, —è—á–µ–π–∫–∞ {new_tool['cellNumber']}")
            
            self.send_response(200)
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            return
            
    def do_OPTIONS(self):
        self.send_response(200)
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, DELETE, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        self.end_headers()

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
load_data()

PORT = 8000

# –ü–æ–ª—É—á–∞–µ–º IP –∞–¥—Ä–µ—Å
server_ip = get_ip_address()

print("=" * 60)
print("üöÄ –°–ò–°–¢–ï–ú–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ò–ù–°–¢–†–£–ú–ï–ù–¢–ê–ú–ò –ó–ê–ü–£–©–ï–ù–ê!")
print("=" * 60)
print(f"üìç –õ–æ–∫–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø:  http://localhost:{PORT}")
print(f"üìç –°–µ—Ç–µ–≤–æ–π –¥–æ—Å—Ç—É–ø:    http://{server_ip}:{PORT}")
print(f"üìç –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:      http://{server_ip}:{PORT}/admin/")
print("=" * 60)
print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(tools_data)}")
print(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤: {DATA_FILE}")
print("=" * 60)
print("üì± –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
print(f"   üîó http://{server_ip}:{PORT}")
print("=" * 60)
print("‚èπÔ∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
print("=" * 60)

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
try:
    webbrowser.open(f'http://localhost:{PORT}')
    print("üåê –ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏...")
except:
    print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
def auto_save():
    while True:
        threading.Event().wait(300)  # 5 –º–∏–Ω—É—Ç
        with data_lock:
            if tools_data:
                save_data()
                print(f"üîÑ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: {len(tools_data)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")

# –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
auto_save_thread = threading.Thread(target=auto_save, daemon=True)
auto_save_thread.start()

with socketserver.TCPServer(("", PORT), ToolHandler) as httpd:
    try:
        httpd.serve_forever()
    except KeyboardInterrupt:
        print("\nüíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º...")
        save_data()
        print("üõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")